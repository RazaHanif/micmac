Week 4 - SQL, Models, Miagration

MySQL, PostgreSQL SQLite are other versions for more specific applications

SQLite is the default in Django

SQLite types

TEXT - simple text (str)
NUMERIC - boolean value or date, not really a number but a numeric value
INTEGER - whole numbers (int)
REAL - real numbers (double)
BLOB - Binary Large OBject (binary data)

MySQL has more types,
like Char(size), VarChar(size), SmallInt, & BigInt

SQLite Constraits
Not Null - cannot be blank
Primary Key - specifiy how you can identify each entry in the table
Default - specify default value
Unique - garuntees each value in that column is unique
Check - checks that the value is within a specifed range

SQLite Attribute/Cue
Autoincrement - increases incrementally for each new entry

SQLite Commands
Create a new table,
define table, comma seperated list of all variable names and types:
    CREATE TABLE <table_name> (
        <VarName> VarType Constraints,
        <VarName> VarType Constraits
    );


Add a new entry,
specify table name, then comma seperated list off all variables, then all values
    INSERT INTO <table_name>
    (<var_name>, <var_name>, <var_name>)
    VALUES (<value>, <value>, <value>);

Get data,
Select what you want from where you want with what limiters to get the data
* == all:
    SELECT * FROM <table_name>;
    SELECT <var_name>, <var_name> FROM <table_name>;

can add limiters
    SELECT * FROM <table_name>
    WHERE <var_name> = <value>
    AND/OR <var_name> = <value>;

    checks to see if any of the values are applicable
    WHERE <var_name> IN (<value>, <value>, <value>);

    checks to see if any wildcard value are applicable
    fill in the % with anything
    WHERE <var_name> LIKE "%...%";

Other limiters
AVERAGE
COUNT
MAX
MIN
SUM
LIMIT
ORDER BY
GROUP BY
HAVING

Change/update data:
    UPDATE <table_name>
        SET <var_name> = <value>
        WHERE <var_name> = <value>;

Delete data:
    DELETE FROM <table_name>
    WHERE <var_name> = <value>;

SQLite
file.sql

sqlite3 file.sql
opens terminal prompt for sql commands

.tables - shows all tables in database
.schema - shows structure of all tables
.modes - change output method - table is best
Forgien Keys - connects tables together
    refrence to a key in another table
    using airport ids in the flights table to reference airport info

JOINs
    Join / Inner Join
        only if both sides of the equation joins
    Left Outer Join
    Right Outer Join
    Full Outer Join
        joins even if both sides dont equate

Index
creates a quick refrence for the table,
takes lots of time and data but makes queries faster

    CREATE INDEX <index_name> ON <table_name> (<var_name>);

SQL Injections
    Hacker attacks on your database
    Not really a problem with Django

Race Conditions
    to prevent multiple querys out of order to a database
    you can put a "lock" on a database while you work on it
    (how does this work? whoodafauqqknows?? figure it out later??)


In django - app - models.py 
specifiy a class that lays out how you wnat your datatable to be strucutred
then def __str__(self):
    to create a string representaion of the object
then use migration to get django to actually create a database based on that models


Create a migration - insturctions of what to do 
Run the migration - actually do those changefa-spin

python3 manage.py makemigrations

That will create a migration

python3 manage.py migrate 

runs the actual migration


run sql in django with a shell
lets you use python commands instead of sql commands

python manage.py shell

from app.models import Class

this lets you create a new entry

var = Class(var=value,var=value)
var.save()

to query the table

Flight.objects.all()

Django has on_delete functions where you can specify params for what to do when deleting an entry

on_delete=models.CASCADE
means that when you delete a dependent the rest of the entries are also deleted

but you can make it so you can "protect" by not letting you delete something if it depends on something else

related_name=departures?? check the notes after



